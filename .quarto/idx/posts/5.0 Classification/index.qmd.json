{"title":"5\\. Classification","markdown":{"yaml":{"title":"5\\. Classification","author":"M Mubashar Ashraf","date":"2023-11-21","categories":["Classification"],"output":"html_document","image":"C.png","format":{"html":{"code-fold":true}},"jupyter":"python3","code-fold":true,"keep-ipynb":true},"headingText":"**Binary Classification: Discriminating Between Two Classes**","containsRefs":false,"markdown":"\n\n**Introduction:** Classification, a fundamental task in machine learning, involves assigning predefined labels to instances based on their features. In this exploration, we delve into the intricacies of classification algorithms, showcasing their applications through Python examples. The journey will unravel the methodologies behind several classification techniques and demonstrate how to leverage them for insightful predictions.\n\n\n### **Logistic Regression:**\n\n-   Logistic regression is a type of statistical method used in machine learning for binary classification problems.\n\n-   It's a go-to algorithm when the outcome we want to predict falls into one of two categories, like whether an email is spam or not.\n\n-   Unlike linear regression, which predicts continuous values, logistic regression predicts the probability that an instance belongs to a particular category.\n\n-   The predicted probability is then transformed using a logistic function, squashing it between 0 and 1.\n\n-   The outcome is classified based on a chosen threshold: if the probability is above the threshold, it's one class; otherwise, it's the other.\n\n**Key Features:**\n\n-   **Probabilistic Prediction:** Logistic regression predicts the likelihood (probability) of an instance belonging to a specific class.\n\n-   **Sigmoid Function:** The logistic or sigmoid function is used to convert raw predictions into probabilities, ensuring they're within the 0 to 1 range.\n\n-   **Binary Outcome:** Ideal for scenarios where the outcome is binary, like yes/no, spam/not spam, etc.\n\n-   **Simple and Interpretable:** Logistic regression is relatively simple, easy to understand, and provides interpretable results.\n\n**Applications:**\n\n-   **Spam Detection:** Identifying whether an email is spam or not.\n\n-   **Medical Diagnosis:** Predicting if a patient has a particular medical condition based on test results.\n\n-   **Credit Scoring:** Assessing the likelihood of a customer defaulting on a loan.\n\n-   **Customer Churn:** Predicting whether a customer is likely to leave a service or not.\n\nLogistic Regression is a go-to algorithm for binary classification tasks.\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\n# Generate synthetic data for binary classification\nX, y = make_classification(n_samples=300, n_features=2, n_informative=2, n_redundant=0, n_clusters_per_class=1, random_state=42)\n\n# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\n# Fit a logistic regression model\nmodel_logistic = LogisticRegression()\nmodel_logistic.fit(X_train, y_train)\n\n# Predictions and evaluation\ny_pred_logistic = model_logistic.predict(X_test)\naccuracy_logistic = accuracy_score(y_test, y_pred_logistic)\n\n# Visualize decision boundary for logistic regression\nplt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Paired, edgecolors='k')\nplt.title('Logistic Regression - Decision Boundary')\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.show()\n\n# Display confusion matrix for logistic regression\nconf_matrix_logistic = confusion_matrix(y_test, y_pred_logistic)\nprint(\"Logistic Regression Example:\")\nprint(\"Confusion Matrix:\\n\", conf_matrix_logistic)\nprint(f\"Accuracy: {accuracy_logistic:.2%}\")\nprint(\"Explanation: Logistic Regression applied to binary classification with a visual representation of the decision boundary.\")\n\n```\n\n### **Support Vector Machines (SVM):**\n\n-   SVM is a versatile and powerful machine learning algorithm used for both classification and regression tasks.\n\n-   Its primary goal is to find the optimal hyperplane that best separates different classes in the data.\n\n-   SVM is especially effective in high-dimensional spaces and is robust even when the number of features exceeds the number of samples.\n\n-   It's a supervised learning algorithm, meaning it learns from labeled training data to make predictions on unseen data.\n\n**Key Features:**\n\n-   **Maximizing Margin:** SVM aims to find a hyperplane with the maximum margin, the distance between the hyperplane and the nearest data point from each class.\n\n-   **Support Vectors:** The critical data points that determine the position of the optimal hyperplane are called support vectors.\n\n-   **Kernel Trick:** SVM can handle non-linear relationships between features by using a kernel function to map the data into a higher-dimensional space.\n\n-   **Versatility:** SVM can be used for binary and multiclass classification as well as regression tasks.\n\n**Applications:**\n\n-   **Image Classification:** SVM is used in image recognition tasks to classify objects in images.\n\n-   **Text Classification:** It's employed in natural language processing for tasks like spam detection and sentiment analysis.\n\n-   **Bioinformatics:** SVM helps in classifying biological data, such as predicting protein functions.\n\n-   **Finance:** SVM is used in predicting stock prices and credit scoring.\n\nSupport Vector Machines are valued for their ability to handle complex relationships in data and find robust decision boundaries, making them applicable to various real-world problems.\n\nSupport Vector Machines offer robust performance in binary classification scenarios.\n\n```{python}\nimport random\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef generate_random_dataset(size):\n    \"\"\" Generate a random dataset and that follows a quadratic  distribution\n    \"\"\"\n    x = []\n    y = []\n    target = []\n    for i in range(size):\n        # class zero\n        x.append(np.round(random.uniform(0, 2.5), 1))\n        y.append(np.round(random.uniform(0, 20), 1))\n        target.append(0)\n        # class one\n        x.append(np.round(random.uniform(1, 5), 2))\n        y.append(np.round(random.uniform(20, 25), 2))\n        target.append(1)\n        x.append(np.round(random.uniform(3, 5), 2))\n        y.append(np.round(random.uniform(5, 25), 2))\n        target.append(1)\n    df_x = pd.DataFrame(data=x)\n    df_y = pd.DataFrame(data=y)\n    df_target = pd.DataFrame(data=target)\n    data_frame = pd.concat([df_x, df_y], ignore_index=True, axis=1)\n    data_frame = pd.concat([data_frame, df_target], ignore_index=True, axis=1)\n    data_frame.columns = ['x', 'y', 'target']\n    return data_frame\n\n# Generate dataset\nsize = 100\ndataset = generate_random_dataset(size)\nfeatures = dataset[['x', 'y']]\nlabel = dataset['target']\n# Hold out 20% of the dataset for training\ntest_size = int(np.round(size * 0.2, 0))\n# Split dataset into training and testing sets\nx_train = features[:-test_size].values\ny_train = label[:-test_size].values\nx_test = features[-test_size:].values\ny_test = label[-test_size:].values\n# Plotting the training set\nfig, ax = plt.subplots(figsize=(12, 7))\n# removing to and right border\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\n# adding major gridlines\nax.grid(color='grey', linestyle='-', linewidth=0.25, alpha=0.5)\nax.scatter(features[:-test_size]['x'], features[:-test_size]['y'], color=\"#8C7298\")\nplt.show()\n```\n\n## **Multiclass Classification: Navigating Diverse Class Labels**\n\n### **Random Forest:**\n\n-   Random Forest is a powerful ensemble learning algorithm used for both classification and regression tasks.\n\n-   It operates by constructing multiple decision trees during training and outputs the mode of the classes (classification) or the mean prediction (regression) of the individual trees.\n\n-   It's an ensemble method, meaning it combines the predictions of multiple models to improve overall accuracy and robustness.\n\n-   The \"forest\" in Random Forest is a collection of decision trees, and the \"random\" part comes from the introduction of randomness during both training and prediction phases.\n\n**Key Features:**\n\n-   **Decision Trees:** Random Forest is built on the foundation of decision trees, which are known for their simplicity and interpretability.\n\n-   **Bootstrap Aggregating (Bagging):** Random Forest employs bagging, a technique that involves training each tree on a random subset of the data, allowing for diverse trees.\n\n-   **Feature Randomness:** During the construction of each tree, a random subset of features is considered at each split, enhancing the model's diversity.\n\n-   **Reducing Overfitting:** The combination of diverse trees and feature randomness helps mitigate overfitting, making Random Forest robust to noisy data.\n\n**Applications:**\n\n-   **Image Classification:** Random Forest is used in image recognition tasks to classify objects in images.\n\n-   **Healthcare:** It's applied in predicting diseases based on patient data and medical images.\n\n-   **Finance:** Random Forest is employed in credit scoring and fraud detection.\n\n-   **Ecology:** In ecology, it helps analyze and predict biodiversity patterns.\n\nRandom Forest is valued for its ability to handle complex relationships in data, provide robust predictions, and mitigate overfitting, making it a widely used algorithm in various domains.\n\nRandom Forest is an ensemble method known for its versatility in handling multiclass classification.\n\n```{python}\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn import tree\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Load the Breast Cancer Dataset\ndata = load_breast_cancer()\ndf = pd.DataFrame(data.data, columns=data.feature_names)\ndf['target'] = data.target\n\n# Arrange Data into Features Matrix and Target Vector\nX = df.loc[:, df.columns != 'target']\ny = df.loc[:, 'target'].values\n\n# Split the data into training and testing sets\nX_train, X_test, Y_train, Y_test = train_test_split(X, y, random_state=0)\n\n# Random Forests in `scikit-learn` (with N = 100)\nrf = RandomForestClassifier(n_estimators=100,\n                            random_state=0)\nrf.fit(X_train, Y_train)\n\nfn=data.feature_names\ncn=data.target_names\nfig, axes = plt.subplots(nrows = 1,ncols = 1,figsize = (4,4), dpi=800)\ntree.plot_tree(rf.estimators_[0],\n               feature_names = fn, \n               class_names=cn,\n               filled = True);\nfig.savefig('rf_individualtree.png')\n```\n\n## **Evaluation Metrics and Beyond**\n\n### **Receiver Operating Characteristic (ROC) Curve:**\n\nROC curves visualize the trade-off between true positive rate and false positive rate.\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import roc_curve, auc\n\n# Load the Breast Cancer dataset\ncancer = load_breast_cancer()\nX = cancer.data\ny = cancer.target\n\n# Convert the problem to binary classification (class 0 vs class 1)\ny_binary = (y == 0).astype(int)\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.25, random_state=42)\n\n# Create a simple SVM model for binary classification\nsvm_model = SVC(kernel='linear', probability=True)\nsvm_model.fit(X_train, y_train)\n\n# Obtain class probabilities for positive class (class 0)\ny_probabilities = svm_model.predict_proba(X_test)[:, 1]\n\n# Compute ROC curve and AUC\nfpr, tpr, _ = roc_curve(y_test, y_probabilities)\nroc_auc = auc(fpr, tpr)\n\n# Plot the ROC curve\nplt.figure(figsize=(8, 6))\nplt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (AUC = {roc_auc:.2f})')\nplt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', label='Random')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve')\nplt.legend(loc='lower right')\nplt.show()\n\n```\n\nThis code uses the Breast Cancer dataset, and you can replace it with any binary classification dataset of your choice. The ROC curve is a useful tool for evaluating the performance of binary classification models.\n\n### **Precision-Recall Curve:**\n\nPrecision-Recall curves help evaluate models under different class distribution scenarios.\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import precision_recall_curve, auc, average_precision_score\n\n# Load the Breast Cancer dataset\ncancer = load_breast_cancer()\nX = cancer.data\ny = cancer.target\n\n# Convert the problem to binary classification (class 0 vs class 1)\ny_binary = (y == 0).astype(int)\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.25, random_state=42)\n\n# Create a simple SVM model for binary classification\nsvm_model = SVC(kernel='linear', probability=True)\nsvm_model.fit(X_train, y_train)\n\n# Obtain class probabilities for positive class (class 0)\ny_probabilities = svm_model.predict_proba(X_test)[:, 1]\n\n# Compute Precision-Recall curve and AUC\nprecision, recall, _ = precision_recall_curve(y_test, y_probabilities)\npr_auc = auc(recall, precision)\naverage_precision = average_precision_score(y_test, y_probabilities)\n\n# Plot the Precision-Recall curve\nplt.figure(figsize=(8, 6))\nplt.plot(recall, precision, color='darkorange', lw=2, label=f'PR curve (AUC = {pr_auc:.2f}, Avg. Precision = {average_precision:.2f})')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall Curve')\nplt.legend(loc='lower right')\nplt.show()\n\n\n```\n\nThis code demonstrates how to create a Precision-Recall curve for a binary classification problem using an SVM model. Replace the dataset with any binary classification dataset of your choice. The Precision-Recall curve provides valuable insights into the performance of a classifier, especially in imbalanced datasets.\n\n### **Mathematical Explanation of Classification in Machine Learning:**\n\nClassification in machine learning is a type of supervised learning where the algorithm learns to categorize input data into predefined classes or labels. The goal is to train the model to make accurate predictions on new, unseen data based on patterns learned during training.\n\n**Binary Classification:** In binary classification, there are two possible outcomes or classes, often denoted as positive (1) and negative (0). The algorithm learns a decision boundary to separate these classes in the feature space.\n\nHere are the mathematical formulas for key binary classification metrics:\n\n**True Positive (TP):**\n\nTP=Number of instances correctly predicted as positive\n\n**True Negative (TN):**\n\nTN=Number of instances correctly predicted as negative\n\n**False Positive (FP):**\n\nFP=Number of instances incorrectly predicted as positive (Type I error)\n\n**False Negative (FN):**\n\nFN=Number of instances incorrectly predicted as negative (Type II error)\n\n**Accuracy:**\n\nAccuracy=TP+TN/(FP+FN+TP+TN)​\n\n**Precision (Positive Predictive Value):**\n\nPrecision=TP/(FP+TP)​\n\n**Recall (Sensitivity, True Positive Rate):**\n\nRecall=TP/(FN+TP)​\n\n**Specificity (True Negative Rate):**\n\nSpecificity=TN/(FP+TN)​\n\n**F1 Score:**\n\nF1Score=(2⋅Precision⋅Recall​)/(Precision+Recall)\n\n**False Positive Rate (FPR):**\n\nFPR=FP/(TN+FP)​\n\n**False Negative Rate (FNR):**\n\nFNR=FN/(TP+FN)​\n\n**Area Under the ROC Curve (AUC-ROC):**\n\nAUC-ROC(Area Under the Receiver Operating Characteristic Curve)\n\nThese formulas provide a quantitative assessment of a binary classification model's performance by considering different aspects such as accuracy, precision, recall, specificity, and the trade-off between precision and recall captured by the F1 score. The AUC-ROC measures the area under the curve that illustrates the model's true positive rate against the false positive rate at various decision thresholds.\n\n**Multiclass Classification:** For multiclass classification, there are more than two classes, and the model learns to distinguish between all possible classes. It involves assigning an input to one of several predefined categories.\n\n**Logistic Regression:** Logistic Regression is a commonly used algorithm for binary classification. It models the probability of an instance belonging to a particular class using the logistic function. The decision boundary is determined by a set of weights and biases.\n\n**Support Vector Machines (SVM):** SVM is another algorithm that finds the optimal hyperplane to separate classes. It works well for both binary and multiclass classification, aiming to maximize the margin between different classes.\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve, auc, precision_recall_curve, confusion_matrix\n\n# Create example data\nX = np.random.rand(100, 2)\ny = (X[:, 0] + X[:, 1] > 1).astype(int)\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a logistic regression model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Predict probabilities and classes\ny_probs = model.predict_proba(X_test)[:, 1]\ny_pred = model.predict(X_test)\n\n# ROC Curve and AUC\nfpr, tpr, _ = roc_curve(y_test, y_probs)\nroc_auc = auc(fpr, tpr)\n\n# Precision-Recall Curve\nprecision, recall, _ = precision_recall_curve(y_test, y_probs)\n\n# Confusion Matrix\nconf_matrix = confusion_matrix(y_test, y_pred)\n\n# Print or visualize metrics as needed\nprint(f\"Area under ROC Curve (AUC): {roc_auc}\")\nplt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC Curve')\nplt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve')\nplt.legend()\nplt.show()\n```\n\nThis code demonstrates a basic binary classification scenario with logistic regression and includes the calculation and visualization of ROC Curve, AUC, Precision-Recall Curve, and a Confusion Matrix. Adjustments can be made for multiclass classification scenarios.\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import precision_recall_curve, auc\n\n# Create example data\nX = np.random.rand(100, 2)\ny = (X[:, 0] + X[:, 1] > 1).astype(int)\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a logistic regression model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Predict probabilities\ny_probs = model.predict_proba(X_test)[:, 1]\n\n# Precision-Recall Curve\nprecision, recall, _ = precision_recall_curve(y_test, y_probs)\npr_auc = auc(recall, precision)\n\n# Plot Precision-Recall Curve\nplt.plot(recall, precision, color='blue', lw=2, label=f'PR Curve (AUC = {pr_auc:.2f})')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall Curve')\nplt.legend()\nplt.show()\n```\n\nThe provided Python code generates a Precision-Recall (PR) Curve for a binary classification scenario. It uses a logistic regression model trained on a synthetic dataset. The dataset is split into training and testing sets, and the logistic regression model is fitted on the training data. The model's predicted probabilities for the positive class on the test set are then used to plot the PR Curve. The curve illustrates the trade-off between precision and recall at various decision thresholds. The area under the PR Curve (AUC) is calculated and displayed in the plot, providing a quantitative measure of model performance.\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\n# Create example data\nX = np.random.rand(100, 2)\ny = (X[:, 0] + X[:, 1] > 1).astype(int)\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a logistic regression model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Predict classes\ny_pred = model.predict(X_test)\n\n# Confusion Matrix\nconf_matrix = confusion_matrix(y_test, y_pred)\n\n# Plot Confusion Matrix\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.show()\n\n```\n\nThe presented Python code produces a Confusion Matrix for a binary classification task using a logistic regression model. Similar to the PR Curve code, it utilizes a synthetic dataset split into training and testing sets. The logistic regression model is trained on the training data, and its predictions on the test set are used to construct the confusion matrix. The matrix visualizes the model's performance by showing the counts of true positive, true negative, false positive, and false negative predictions. The Seaborn library is employed to create a heatmap for clearer visualization of the confusion matrix. This allows for a detailed assessment of the model's ability to correctly classify instances into positive and negative classes.\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix, roc_curve, auc, precision_recall_curve, average_precision_score\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n\n# Sample true labels and predicted labels\ny_true = np.array([1, 0, 1, 1, 0, 1, 0, 0, 1, 0])\ny_pred = np.array([1, 0, 1, 0, 1, 1, 0, 1, 1, 0])\n\n# Get different types of confusion matrices\nconf_matrix = confusion_matrix(y_true, y_pred)\n\n# Calculate additional metrics\naccuracy = accuracy_score(y_true, y_pred)\nprecision = precision_score(y_true, y_pred)\nrecall = recall_score(y_true, y_pred)\nf1 = f1_score(y_true, y_pred)\n\n# Calculate ROC curve\nfpr, tpr, _ = roc_curve(y_true, y_pred)\nroc_auc = auc(fpr, tpr)\n\n# Calculate Precision-Recall curve\nprecision_curve, recall_curve, _ = precision_recall_curve(y_true, y_pred)\npr_auc = average_precision_score(y_true, y_pred)\n\n# Create a figure with subplots\nfig, axes = plt.subplots(1, 4, figsize=(15, 4))\n\n# Plot confusion matrices\nsns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False, ax=axes[0])\naxes[0].set_title('Confusion Matrix')\n\n# Plot additional metrics\nsns.barplot(x=['Accuracy', 'Precision', 'Recall', 'F1 Score'], y=[accuracy, precision, recall, f1], ax=axes[1])\naxes[1].set_title('Additional Metrics')\n\n# Plot ROC Curve\naxes[2].plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = {:.2f})'.format(roc_auc))\naxes[2].plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\naxes[2].set_xlim([0.0, 1.0])\naxes[2].set_ylim([0.0, 1.05])\naxes[2].set_xlabel('False Positive Rate')\naxes[2].set_ylabel('True Positive Rate')\naxes[2].set_title('ROC Curve')\naxes[2].legend(loc=\"lower right\")\n\n# Plot Precision-Recall Curve\naxes[3].plot(recall_curve, precision_curve, color='darkorange', lw=2, label='Precision-Recall curve (area = {:.2f})'.format(pr_auc))\naxes[3].set_xlim([0.0, 1.0])\naxes[3].set_ylim([0.0, 1.05])\naxes[3].set_xlabel('Recall')\naxes[3].set_ylabel('Precision')\naxes[3].set_title('Precision-Recall Curve')\naxes[3].legend(loc=\"lower right\")\n\nplt.tight_layout()\nplt.show()\n\n```\n\nThis code uses a sample set of true labels (y_true) and predicted labels (y_pred). It calculates the confusion matrix and additional metrics such as accuracy, precision, recall, and F1 score. The results are visualized using Seaborn in a side-by-side format with subplots for the confusion matrix, additional metrics, ROC Curve, and Precision-Recall Curve. Make sure to adjust the labels and data according to your specific use case.\n\n## **Conclusion:**\n\nClassification algorithms are indispensable tools for extracting patterns and making predictions across a spectrum of applications. The Python examples, complemented by advanced plots and evaluation metrics, provide a glimpse into the richness and versatility of classification in machine learning. As we navigate the landscape of classification, these techniques empower us to unravel complex relationships and contribute meaningfully to data-driven decision-making.\n","srcMarkdownNoYaml":"\n\n**Introduction:** Classification, a fundamental task in machine learning, involves assigning predefined labels to instances based on their features. In this exploration, we delve into the intricacies of classification algorithms, showcasing their applications through Python examples. The journey will unravel the methodologies behind several classification techniques and demonstrate how to leverage them for insightful predictions.\n\n## **Binary Classification: Discriminating Between Two Classes**\n\n### **Logistic Regression:**\n\n-   Logistic regression is a type of statistical method used in machine learning for binary classification problems.\n\n-   It's a go-to algorithm when the outcome we want to predict falls into one of two categories, like whether an email is spam or not.\n\n-   Unlike linear regression, which predicts continuous values, logistic regression predicts the probability that an instance belongs to a particular category.\n\n-   The predicted probability is then transformed using a logistic function, squashing it between 0 and 1.\n\n-   The outcome is classified based on a chosen threshold: if the probability is above the threshold, it's one class; otherwise, it's the other.\n\n**Key Features:**\n\n-   **Probabilistic Prediction:** Logistic regression predicts the likelihood (probability) of an instance belonging to a specific class.\n\n-   **Sigmoid Function:** The logistic or sigmoid function is used to convert raw predictions into probabilities, ensuring they're within the 0 to 1 range.\n\n-   **Binary Outcome:** Ideal for scenarios where the outcome is binary, like yes/no, spam/not spam, etc.\n\n-   **Simple and Interpretable:** Logistic regression is relatively simple, easy to understand, and provides interpretable results.\n\n**Applications:**\n\n-   **Spam Detection:** Identifying whether an email is spam or not.\n\n-   **Medical Diagnosis:** Predicting if a patient has a particular medical condition based on test results.\n\n-   **Credit Scoring:** Assessing the likelihood of a customer defaulting on a loan.\n\n-   **Customer Churn:** Predicting whether a customer is likely to leave a service or not.\n\nLogistic Regression is a go-to algorithm for binary classification tasks.\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\n# Generate synthetic data for binary classification\nX, y = make_classification(n_samples=300, n_features=2, n_informative=2, n_redundant=0, n_clusters_per_class=1, random_state=42)\n\n# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\n# Fit a logistic regression model\nmodel_logistic = LogisticRegression()\nmodel_logistic.fit(X_train, y_train)\n\n# Predictions and evaluation\ny_pred_logistic = model_logistic.predict(X_test)\naccuracy_logistic = accuracy_score(y_test, y_pred_logistic)\n\n# Visualize decision boundary for logistic regression\nplt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Paired, edgecolors='k')\nplt.title('Logistic Regression - Decision Boundary')\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.show()\n\n# Display confusion matrix for logistic regression\nconf_matrix_logistic = confusion_matrix(y_test, y_pred_logistic)\nprint(\"Logistic Regression Example:\")\nprint(\"Confusion Matrix:\\n\", conf_matrix_logistic)\nprint(f\"Accuracy: {accuracy_logistic:.2%}\")\nprint(\"Explanation: Logistic Regression applied to binary classification with a visual representation of the decision boundary.\")\n\n```\n\n### **Support Vector Machines (SVM):**\n\n-   SVM is a versatile and powerful machine learning algorithm used for both classification and regression tasks.\n\n-   Its primary goal is to find the optimal hyperplane that best separates different classes in the data.\n\n-   SVM is especially effective in high-dimensional spaces and is robust even when the number of features exceeds the number of samples.\n\n-   It's a supervised learning algorithm, meaning it learns from labeled training data to make predictions on unseen data.\n\n**Key Features:**\n\n-   **Maximizing Margin:** SVM aims to find a hyperplane with the maximum margin, the distance between the hyperplane and the nearest data point from each class.\n\n-   **Support Vectors:** The critical data points that determine the position of the optimal hyperplane are called support vectors.\n\n-   **Kernel Trick:** SVM can handle non-linear relationships between features by using a kernel function to map the data into a higher-dimensional space.\n\n-   **Versatility:** SVM can be used for binary and multiclass classification as well as regression tasks.\n\n**Applications:**\n\n-   **Image Classification:** SVM is used in image recognition tasks to classify objects in images.\n\n-   **Text Classification:** It's employed in natural language processing for tasks like spam detection and sentiment analysis.\n\n-   **Bioinformatics:** SVM helps in classifying biological data, such as predicting protein functions.\n\n-   **Finance:** SVM is used in predicting stock prices and credit scoring.\n\nSupport Vector Machines are valued for their ability to handle complex relationships in data and find robust decision boundaries, making them applicable to various real-world problems.\n\nSupport Vector Machines offer robust performance in binary classification scenarios.\n\n```{python}\nimport random\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef generate_random_dataset(size):\n    \"\"\" Generate a random dataset and that follows a quadratic  distribution\n    \"\"\"\n    x = []\n    y = []\n    target = []\n    for i in range(size):\n        # class zero\n        x.append(np.round(random.uniform(0, 2.5), 1))\n        y.append(np.round(random.uniform(0, 20), 1))\n        target.append(0)\n        # class one\n        x.append(np.round(random.uniform(1, 5), 2))\n        y.append(np.round(random.uniform(20, 25), 2))\n        target.append(1)\n        x.append(np.round(random.uniform(3, 5), 2))\n        y.append(np.round(random.uniform(5, 25), 2))\n        target.append(1)\n    df_x = pd.DataFrame(data=x)\n    df_y = pd.DataFrame(data=y)\n    df_target = pd.DataFrame(data=target)\n    data_frame = pd.concat([df_x, df_y], ignore_index=True, axis=1)\n    data_frame = pd.concat([data_frame, df_target], ignore_index=True, axis=1)\n    data_frame.columns = ['x', 'y', 'target']\n    return data_frame\n\n# Generate dataset\nsize = 100\ndataset = generate_random_dataset(size)\nfeatures = dataset[['x', 'y']]\nlabel = dataset['target']\n# Hold out 20% of the dataset for training\ntest_size = int(np.round(size * 0.2, 0))\n# Split dataset into training and testing sets\nx_train = features[:-test_size].values\ny_train = label[:-test_size].values\nx_test = features[-test_size:].values\ny_test = label[-test_size:].values\n# Plotting the training set\nfig, ax = plt.subplots(figsize=(12, 7))\n# removing to and right border\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\n# adding major gridlines\nax.grid(color='grey', linestyle='-', linewidth=0.25, alpha=0.5)\nax.scatter(features[:-test_size]['x'], features[:-test_size]['y'], color=\"#8C7298\")\nplt.show()\n```\n\n## **Multiclass Classification: Navigating Diverse Class Labels**\n\n### **Random Forest:**\n\n-   Random Forest is a powerful ensemble learning algorithm used for both classification and regression tasks.\n\n-   It operates by constructing multiple decision trees during training and outputs the mode of the classes (classification) or the mean prediction (regression) of the individual trees.\n\n-   It's an ensemble method, meaning it combines the predictions of multiple models to improve overall accuracy and robustness.\n\n-   The \"forest\" in Random Forest is a collection of decision trees, and the \"random\" part comes from the introduction of randomness during both training and prediction phases.\n\n**Key Features:**\n\n-   **Decision Trees:** Random Forest is built on the foundation of decision trees, which are known for their simplicity and interpretability.\n\n-   **Bootstrap Aggregating (Bagging):** Random Forest employs bagging, a technique that involves training each tree on a random subset of the data, allowing for diverse trees.\n\n-   **Feature Randomness:** During the construction of each tree, a random subset of features is considered at each split, enhancing the model's diversity.\n\n-   **Reducing Overfitting:** The combination of diverse trees and feature randomness helps mitigate overfitting, making Random Forest robust to noisy data.\n\n**Applications:**\n\n-   **Image Classification:** Random Forest is used in image recognition tasks to classify objects in images.\n\n-   **Healthcare:** It's applied in predicting diseases based on patient data and medical images.\n\n-   **Finance:** Random Forest is employed in credit scoring and fraud detection.\n\n-   **Ecology:** In ecology, it helps analyze and predict biodiversity patterns.\n\nRandom Forest is valued for its ability to handle complex relationships in data, provide robust predictions, and mitigate overfitting, making it a widely used algorithm in various domains.\n\nRandom Forest is an ensemble method known for its versatility in handling multiclass classification.\n\n```{python}\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn import tree\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Load the Breast Cancer Dataset\ndata = load_breast_cancer()\ndf = pd.DataFrame(data.data, columns=data.feature_names)\ndf['target'] = data.target\n\n# Arrange Data into Features Matrix and Target Vector\nX = df.loc[:, df.columns != 'target']\ny = df.loc[:, 'target'].values\n\n# Split the data into training and testing sets\nX_train, X_test, Y_train, Y_test = train_test_split(X, y, random_state=0)\n\n# Random Forests in `scikit-learn` (with N = 100)\nrf = RandomForestClassifier(n_estimators=100,\n                            random_state=0)\nrf.fit(X_train, Y_train)\n\nfn=data.feature_names\ncn=data.target_names\nfig, axes = plt.subplots(nrows = 1,ncols = 1,figsize = (4,4), dpi=800)\ntree.plot_tree(rf.estimators_[0],\n               feature_names = fn, \n               class_names=cn,\n               filled = True);\nfig.savefig('rf_individualtree.png')\n```\n\n## **Evaluation Metrics and Beyond**\n\n### **Receiver Operating Characteristic (ROC) Curve:**\n\nROC curves visualize the trade-off between true positive rate and false positive rate.\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import roc_curve, auc\n\n# Load the Breast Cancer dataset\ncancer = load_breast_cancer()\nX = cancer.data\ny = cancer.target\n\n# Convert the problem to binary classification (class 0 vs class 1)\ny_binary = (y == 0).astype(int)\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.25, random_state=42)\n\n# Create a simple SVM model for binary classification\nsvm_model = SVC(kernel='linear', probability=True)\nsvm_model.fit(X_train, y_train)\n\n# Obtain class probabilities for positive class (class 0)\ny_probabilities = svm_model.predict_proba(X_test)[:, 1]\n\n# Compute ROC curve and AUC\nfpr, tpr, _ = roc_curve(y_test, y_probabilities)\nroc_auc = auc(fpr, tpr)\n\n# Plot the ROC curve\nplt.figure(figsize=(8, 6))\nplt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (AUC = {roc_auc:.2f})')\nplt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', label='Random')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve')\nplt.legend(loc='lower right')\nplt.show()\n\n```\n\nThis code uses the Breast Cancer dataset, and you can replace it with any binary classification dataset of your choice. The ROC curve is a useful tool for evaluating the performance of binary classification models.\n\n### **Precision-Recall Curve:**\n\nPrecision-Recall curves help evaluate models under different class distribution scenarios.\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import precision_recall_curve, auc, average_precision_score\n\n# Load the Breast Cancer dataset\ncancer = load_breast_cancer()\nX = cancer.data\ny = cancer.target\n\n# Convert the problem to binary classification (class 0 vs class 1)\ny_binary = (y == 0).astype(int)\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.25, random_state=42)\n\n# Create a simple SVM model for binary classification\nsvm_model = SVC(kernel='linear', probability=True)\nsvm_model.fit(X_train, y_train)\n\n# Obtain class probabilities for positive class (class 0)\ny_probabilities = svm_model.predict_proba(X_test)[:, 1]\n\n# Compute Precision-Recall curve and AUC\nprecision, recall, _ = precision_recall_curve(y_test, y_probabilities)\npr_auc = auc(recall, precision)\naverage_precision = average_precision_score(y_test, y_probabilities)\n\n# Plot the Precision-Recall curve\nplt.figure(figsize=(8, 6))\nplt.plot(recall, precision, color='darkorange', lw=2, label=f'PR curve (AUC = {pr_auc:.2f}, Avg. Precision = {average_precision:.2f})')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall Curve')\nplt.legend(loc='lower right')\nplt.show()\n\n\n```\n\nThis code demonstrates how to create a Precision-Recall curve for a binary classification problem using an SVM model. Replace the dataset with any binary classification dataset of your choice. The Precision-Recall curve provides valuable insights into the performance of a classifier, especially in imbalanced datasets.\n\n### **Mathematical Explanation of Classification in Machine Learning:**\n\nClassification in machine learning is a type of supervised learning where the algorithm learns to categorize input data into predefined classes or labels. The goal is to train the model to make accurate predictions on new, unseen data based on patterns learned during training.\n\n**Binary Classification:** In binary classification, there are two possible outcomes or classes, often denoted as positive (1) and negative (0). The algorithm learns a decision boundary to separate these classes in the feature space.\n\nHere are the mathematical formulas for key binary classification metrics:\n\n**True Positive (TP):**\n\nTP=Number of instances correctly predicted as positive\n\n**True Negative (TN):**\n\nTN=Number of instances correctly predicted as negative\n\n**False Positive (FP):**\n\nFP=Number of instances incorrectly predicted as positive (Type I error)\n\n**False Negative (FN):**\n\nFN=Number of instances incorrectly predicted as negative (Type II error)\n\n**Accuracy:**\n\nAccuracy=TP+TN/(FP+FN+TP+TN)​\n\n**Precision (Positive Predictive Value):**\n\nPrecision=TP/(FP+TP)​\n\n**Recall (Sensitivity, True Positive Rate):**\n\nRecall=TP/(FN+TP)​\n\n**Specificity (True Negative Rate):**\n\nSpecificity=TN/(FP+TN)​\n\n**F1 Score:**\n\nF1Score=(2⋅Precision⋅Recall​)/(Precision+Recall)\n\n**False Positive Rate (FPR):**\n\nFPR=FP/(TN+FP)​\n\n**False Negative Rate (FNR):**\n\nFNR=FN/(TP+FN)​\n\n**Area Under the ROC Curve (AUC-ROC):**\n\nAUC-ROC(Area Under the Receiver Operating Characteristic Curve)\n\nThese formulas provide a quantitative assessment of a binary classification model's performance by considering different aspects such as accuracy, precision, recall, specificity, and the trade-off between precision and recall captured by the F1 score. The AUC-ROC measures the area under the curve that illustrates the model's true positive rate against the false positive rate at various decision thresholds.\n\n**Multiclass Classification:** For multiclass classification, there are more than two classes, and the model learns to distinguish between all possible classes. It involves assigning an input to one of several predefined categories.\n\n**Logistic Regression:** Logistic Regression is a commonly used algorithm for binary classification. It models the probability of an instance belonging to a particular class using the logistic function. The decision boundary is determined by a set of weights and biases.\n\n**Support Vector Machines (SVM):** SVM is another algorithm that finds the optimal hyperplane to separate classes. It works well for both binary and multiclass classification, aiming to maximize the margin between different classes.\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve, auc, precision_recall_curve, confusion_matrix\n\n# Create example data\nX = np.random.rand(100, 2)\ny = (X[:, 0] + X[:, 1] > 1).astype(int)\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a logistic regression model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Predict probabilities and classes\ny_probs = model.predict_proba(X_test)[:, 1]\ny_pred = model.predict(X_test)\n\n# ROC Curve and AUC\nfpr, tpr, _ = roc_curve(y_test, y_probs)\nroc_auc = auc(fpr, tpr)\n\n# Precision-Recall Curve\nprecision, recall, _ = precision_recall_curve(y_test, y_probs)\n\n# Confusion Matrix\nconf_matrix = confusion_matrix(y_test, y_pred)\n\n# Print or visualize metrics as needed\nprint(f\"Area under ROC Curve (AUC): {roc_auc}\")\nplt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC Curve')\nplt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve')\nplt.legend()\nplt.show()\n```\n\nThis code demonstrates a basic binary classification scenario with logistic regression and includes the calculation and visualization of ROC Curve, AUC, Precision-Recall Curve, and a Confusion Matrix. Adjustments can be made for multiclass classification scenarios.\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import precision_recall_curve, auc\n\n# Create example data\nX = np.random.rand(100, 2)\ny = (X[:, 0] + X[:, 1] > 1).astype(int)\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a logistic regression model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Predict probabilities\ny_probs = model.predict_proba(X_test)[:, 1]\n\n# Precision-Recall Curve\nprecision, recall, _ = precision_recall_curve(y_test, y_probs)\npr_auc = auc(recall, precision)\n\n# Plot Precision-Recall Curve\nplt.plot(recall, precision, color='blue', lw=2, label=f'PR Curve (AUC = {pr_auc:.2f})')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall Curve')\nplt.legend()\nplt.show()\n```\n\nThe provided Python code generates a Precision-Recall (PR) Curve for a binary classification scenario. It uses a logistic regression model trained on a synthetic dataset. The dataset is split into training and testing sets, and the logistic regression model is fitted on the training data. The model's predicted probabilities for the positive class on the test set are then used to plot the PR Curve. The curve illustrates the trade-off between precision and recall at various decision thresholds. The area under the PR Curve (AUC) is calculated and displayed in the plot, providing a quantitative measure of model performance.\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\n# Create example data\nX = np.random.rand(100, 2)\ny = (X[:, 0] + X[:, 1] > 1).astype(int)\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a logistic regression model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Predict classes\ny_pred = model.predict(X_test)\n\n# Confusion Matrix\nconf_matrix = confusion_matrix(y_test, y_pred)\n\n# Plot Confusion Matrix\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.show()\n\n```\n\nThe presented Python code produces a Confusion Matrix for a binary classification task using a logistic regression model. Similar to the PR Curve code, it utilizes a synthetic dataset split into training and testing sets. The logistic regression model is trained on the training data, and its predictions on the test set are used to construct the confusion matrix. The matrix visualizes the model's performance by showing the counts of true positive, true negative, false positive, and false negative predictions. The Seaborn library is employed to create a heatmap for clearer visualization of the confusion matrix. This allows for a detailed assessment of the model's ability to correctly classify instances into positive and negative classes.\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix, roc_curve, auc, precision_recall_curve, average_precision_score\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n\n# Sample true labels and predicted labels\ny_true = np.array([1, 0, 1, 1, 0, 1, 0, 0, 1, 0])\ny_pred = np.array([1, 0, 1, 0, 1, 1, 0, 1, 1, 0])\n\n# Get different types of confusion matrices\nconf_matrix = confusion_matrix(y_true, y_pred)\n\n# Calculate additional metrics\naccuracy = accuracy_score(y_true, y_pred)\nprecision = precision_score(y_true, y_pred)\nrecall = recall_score(y_true, y_pred)\nf1 = f1_score(y_true, y_pred)\n\n# Calculate ROC curve\nfpr, tpr, _ = roc_curve(y_true, y_pred)\nroc_auc = auc(fpr, tpr)\n\n# Calculate Precision-Recall curve\nprecision_curve, recall_curve, _ = precision_recall_curve(y_true, y_pred)\npr_auc = average_precision_score(y_true, y_pred)\n\n# Create a figure with subplots\nfig, axes = plt.subplots(1, 4, figsize=(15, 4))\n\n# Plot confusion matrices\nsns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False, ax=axes[0])\naxes[0].set_title('Confusion Matrix')\n\n# Plot additional metrics\nsns.barplot(x=['Accuracy', 'Precision', 'Recall', 'F1 Score'], y=[accuracy, precision, recall, f1], ax=axes[1])\naxes[1].set_title('Additional Metrics')\n\n# Plot ROC Curve\naxes[2].plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = {:.2f})'.format(roc_auc))\naxes[2].plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\naxes[2].set_xlim([0.0, 1.0])\naxes[2].set_ylim([0.0, 1.05])\naxes[2].set_xlabel('False Positive Rate')\naxes[2].set_ylabel('True Positive Rate')\naxes[2].set_title('ROC Curve')\naxes[2].legend(loc=\"lower right\")\n\n# Plot Precision-Recall Curve\naxes[3].plot(recall_curve, precision_curve, color='darkorange', lw=2, label='Precision-Recall curve (area = {:.2f})'.format(pr_auc))\naxes[3].set_xlim([0.0, 1.0])\naxes[3].set_ylim([0.0, 1.05])\naxes[3].set_xlabel('Recall')\naxes[3].set_ylabel('Precision')\naxes[3].set_title('Precision-Recall Curve')\naxes[3].legend(loc=\"lower right\")\n\nplt.tight_layout()\nplt.show()\n\n```\n\nThis code uses a sample set of true labels (y_true) and predicted labels (y_pred). It calculates the confusion matrix and additional metrics such as accuracy, precision, recall, and F1 score. The results are visualized using Seaborn in a side-by-side format with subplots for the confusion matrix, additional metrics, ROC Curve, and Precision-Recall Curve. Make sure to adjust the labels and data according to your specific use case.\n\n## **Conclusion:**\n\nClassification algorithms are indispensable tools for extracting patterns and making predictions across a spectrum of applications. The Python examples, complemented by advanced plots and evaluation metrics, provide a glimpse into the richness and versatility of classification in machine learning. As we navigate the landscape of classification, these techniques empower us to unravel complex relationships and contribute meaningfully to data-driven decision-making.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":"html_document","warning":true,"include":true,"keep-md":false,"keep-ipynb":true,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"toc-depth":2,"html-math-method":"katex","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"flatly","toc-expand":2,"max-width":"1000px","code-summary":"Show the code","title-block-banner":true,"title":"5\\. Classification","author":"M Mubashar Ashraf","date":"2023-11-21","categories":["Classification"],"image":"C.png","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}